{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport default function useDebounce(value, delay) {\n  _s();\n\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");","map":{"version":3,"sources":["/home/frangb/Documentos/xolos/practicas/src/services/debounceService.js"],"names":["useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AAAA;;AAC9C;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAACG,KAAD,CAApD;AAEAF,EAAAA,SAAS,CACL,MAAM;AACF;AACA,UAAMM,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACH,KAFyB,EAEvBC,KAFuB,CAA1B,CAFE,CAMF;AACA;AACA;;AACA,WAAO,MAAM;AACTK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,KAFD;AAGH,GAbI,EAcL,CAACJ,KAAD,EAAQC,KAAR,CAdK,CAcU;AAdV,GAAT;AAiBA,SAAOC,cAAP;AACH;;GAtBuBH,W","sourcesContent":["import {useState, useEffect} from 'react';\n\nexport default function useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Update debounced value after delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Cancel the timeout if value changes (also on delay change or unmount)\n            // This is how we prevent debounced value from updating if value is changed ...\n            // .. within the delay period. Timeout gets cleared and restarted.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay] // Only re-call effect if value or delay changes\n    );\n\n    return debouncedValue;\n}"]},"metadata":{},"sourceType":"module"}